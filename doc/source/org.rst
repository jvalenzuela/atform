Organization
============

.. _section:

Sectioning
----------

By default, |project_name| will automatically number tests with single,
increasing integer;
simple, yet often insufficient. Most projects will need
additional organizational levels to segregate related test procedures into
sections, and |project_name| can support this by numbering tests
with multiple integer fields,
e.g., 5.1 or 1.8.9. Any quantity of fields can be used,
although practical values are between two and four. The only stipulation
regarding numbering is all test procedures must use the same format,
i.e., *every* test will be numbered with the same quantity of fields.

When using two or more numbering fields, |project_name| refers to each field as a
level, with the leftmost field as level one, increasing up to
the number of configured levels. For example, when configured for
three levels, tests will be numbered *x.y.z*; where *x* is level one, *y* is
level two, and *z* is level three.

The following example shows the two commands for organizing tests
into sections:
:py:func:`atform.set_id_depth` and
:py:func:`atform.section`:

.. literalinclude:: examples/section.py
   :caption: section.py


.. _skip:

Skipping Tests
--------------

Having tests automatically numbered is generally helpful, alleviating the
task of manually enumerating tests and sections, however, there are
some circumstances where the author must intervene. The most common
cases are reserving a range of numbers for future use, or removing a
defunct test without affecting later ones. The following example illustrates
some different methods of skipping numbers:

.. literalinclude:: examples/skip.py
   :caption: skip.py


Source Files
------------

Another tactic for organizing test procedures is to split them into separate
scripts. Dividing large constructs into smaller components, each within their
own file is common in many domains, including documentation. This approach
makes it easier to locate content, and for multiple authors to work on tests
simultaneously. Separating tests into multiple scripts, however, does not
affect the output; tests are numbered in the order they are encountered
regardless of how many source files are involved.

Organizing tests into multiple scripts utilizes Python's :code:`import` keyword.
The examples so far use :code:`import atform` to load |project_name|;
separate scripts, each containing their own set of tests, e.g., one script
per section, can be imported in a similar fashion. The recommended way to
do this is to arrange scripts heirarchically, with one script at the top-level
containing the setup and output areas, and the actual test content
imported from one or more lower-level scripts. The example below shows
a top-level script that imports content from two, separate files:

.. literalinclude:: examples/main.py
   :caption: main.py

Next are the scripts imported from the main script, illustrating how
content can be distributed into the lower-level scripts:

.. literalinclude:: examples/button.py
   :caption: button.py

.. literalinclude:: examples/switch.py
   :caption: switch.py

When generating PDF output for tests in multiple files, execute the top-level
script only, which will automatically incorporate any imported scripts.
All tests in the example above would be generated by running
:command:`python main.py`.
